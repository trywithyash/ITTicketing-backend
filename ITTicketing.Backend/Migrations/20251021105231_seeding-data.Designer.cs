// <auto-generated />
using System;
using ITTicketing.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITTicketing.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021105231_seeding-data")]
    partial class seedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITTicketing.Backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleCode = "EMPLOYEE"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleCode = "IT_PERSON"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleCode = "L1_MANAGER"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleCode = "L2_HEAD"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleCode = "COO"
                        });
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentApproverId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainIssue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<int>("SlaHours")
                        .HasColumnType("integer");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SubIssue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CurrentApproverId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketApprovalLog", b =>
                {
                    b.Property<Guid>("ApprovalLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ApproverId")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("ApprovalLogId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketApprovalLogs");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketAttachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AttachmentId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketAttachments");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketAuditLog", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ActivityId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketAuditLogs");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketComment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketComments");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 100,
                            Department = "Executive",
                            Email = "minan@abstractgroup.com",
                            FullName = "Minan (CEO)",
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 5,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "minan.ceo"
                        },
                        new
                        {
                            UserId = 101,
                            Department = "Executive",
                            Email = "rashmi@abstractgroup.com",
                            FullName = "Rashmi (COO)",
                            ManagerId = 100,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 5,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "rashmi.coo"
                        },
                        new
                        {
                            UserId = 201,
                            Department = "Operations",
                            Email = "anjali@abstractgroup.com",
                            FullName = "Anjali (L2 Head)",
                            ManagerId = 101,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 4,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "anjali.l2"
                        },
                        new
                        {
                            UserId = 202,
                            Department = "Operations",
                            Email = "rohan@abstractgroup.com",
                            FullName = "Rohan (L2 Head)",
                            ManagerId = 101,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 4,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "rohan.l2"
                        },
                        new
                        {
                            UserId = 301,
                            Department = "Operations",
                            Email = "deepak@abstractgroup.com",
                            FullName = "Deepak (L1 Manager)",
                            ManagerId = 201,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 3,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "deepak.l1"
                        },
                        new
                        {
                            UserId = 302,
                            Department = "Finance",
                            Email = "kavita@abstractgroup.com",
                            FullName = "Kavita (L1 Manager)",
                            ManagerId = 201,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 3,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "kavita.l1"
                        },
                        new
                        {
                            UserId = 303,
                            Department = "Marketing",
                            Email = "simran@abstractgroup.com",
                            FullName = "Simran (L1 Manager)",
                            ManagerId = 202,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 3,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "simran.l1"
                        },
                        new
                        {
                            UserId = 401,
                            Department = "IT Support",
                            Email = "rahul@abstractgroup.com",
                            FullName = "Rahul (IT Person)",
                            ManagerId = 301,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "rahul.it"
                        },
                        new
                        {
                            UserId = 402,
                            Department = "IT Support",
                            Email = "sneha@abstractgroup.com",
                            FullName = "Sneha (IT Person)",
                            ManagerId = 301,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "sneha.it"
                        },
                        new
                        {
                            UserId = 403,
                            Department = "IT Support",
                            Email = "amit@abstractgroup.com",
                            FullName = "Amit (IT Person)",
                            ManagerId = 302,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "amit.it"
                        },
                        new
                        {
                            UserId = 404,
                            Department = "IT Support",
                            Email = "vikas@abstractgroup.com",
                            FullName = "Vikas (IT Person)",
                            ManagerId = 303,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "vikas.it"
                        },
                        new
                        {
                            UserId = 501,
                            Department = "Marketing",
                            Email = "tara@abstractgroup.com",
                            FullName = "Tara (Employee)",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "tara.emp"
                        },
                        new
                        {
                            UserId = 502,
                            Department = "Marketing",
                            Email = "alex@abstractgroup.com",
                            FullName = "Alex (Employee)",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "alex.emp"
                        },
                        new
                        {
                            UserId = 503,
                            Department = "HR",
                            Email = "radha@abstractgroup.com",
                            FullName = "Radha (Employee)",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "radha.emp"
                        },
                        new
                        {
                            UserId = 504,
                            Department = "Finance",
                            Email = "neha@abstractgroup.com",
                            FullName = "Neha (Employee)",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "neha.emp"
                        },
                        new
                        {
                            UserId = 505,
                            Department = "Sales",
                            Email = "priya@abstractgroup.com",
                            FullName = "Priya (Employee)",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "priya.emp"
                        },
                        new
                        {
                            UserId = 506,
                            Department = "Dept 2",
                            Email = "employee_506@abstractgroup.com",
                            FullName = "Test Employee 506",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_506"
                        },
                        new
                        {
                            UserId = 507,
                            Department = "Dept 3",
                            Email = "employee_507@abstractgroup.com",
                            FullName = "Test Employee 507",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_507"
                        },
                        new
                        {
                            UserId = 508,
                            Department = "Dept 4",
                            Email = "employee_508@abstractgroup.com",
                            FullName = "Test Employee 508",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_508"
                        },
                        new
                        {
                            UserId = 509,
                            Department = "Dept 5",
                            Email = "employee_509@abstractgroup.com",
                            FullName = "Test Employee 509",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_509"
                        },
                        new
                        {
                            UserId = 510,
                            Department = "Dept 1",
                            Email = "employee_510@abstractgroup.com",
                            FullName = "Test Employee 510",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_510"
                        },
                        new
                        {
                            UserId = 511,
                            Department = "Dept 2",
                            Email = "employee_511@abstractgroup.com",
                            FullName = "Test Employee 511",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_511"
                        },
                        new
                        {
                            UserId = 512,
                            Department = "Dept 3",
                            Email = "employee_512@abstractgroup.com",
                            FullName = "Test Employee 512",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_512"
                        },
                        new
                        {
                            UserId = 513,
                            Department = "Dept 4",
                            Email = "employee_513@abstractgroup.com",
                            FullName = "Test Employee 513",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_513"
                        },
                        new
                        {
                            UserId = 514,
                            Department = "Dept 5",
                            Email = "employee_514@abstractgroup.com",
                            FullName = "Test Employee 514",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_514"
                        },
                        new
                        {
                            UserId = 515,
                            Department = "Dept 1",
                            Email = "employee_515@abstractgroup.com",
                            FullName = "Test Employee 515",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_515"
                        },
                        new
                        {
                            UserId = 516,
                            Department = "Dept 2",
                            Email = "employee_516@abstractgroup.com",
                            FullName = "Test Employee 516",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_516"
                        },
                        new
                        {
                            UserId = 517,
                            Department = "Dept 3",
                            Email = "employee_517@abstractgroup.com",
                            FullName = "Test Employee 517",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_517"
                        },
                        new
                        {
                            UserId = 518,
                            Department = "Dept 4",
                            Email = "employee_518@abstractgroup.com",
                            FullName = "Test Employee 518",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_518"
                        },
                        new
                        {
                            UserId = 519,
                            Department = "Dept 5",
                            Email = "employee_519@abstractgroup.com",
                            FullName = "Test Employee 519",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_519"
                        },
                        new
                        {
                            UserId = 520,
                            Department = "Dept 1",
                            Email = "employee_520@abstractgroup.com",
                            FullName = "Test Employee 520",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_520"
                        },
                        new
                        {
                            UserId = 521,
                            Department = "Dept 2",
                            Email = "employee_521@abstractgroup.com",
                            FullName = "Test Employee 521",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_521"
                        },
                        new
                        {
                            UserId = 522,
                            Department = "Dept 3",
                            Email = "employee_522@abstractgroup.com",
                            FullName = "Test Employee 522",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_522"
                        },
                        new
                        {
                            UserId = 523,
                            Department = "Dept 4",
                            Email = "employee_523@abstractgroup.com",
                            FullName = "Test Employee 523",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_523"
                        },
                        new
                        {
                            UserId = 524,
                            Department = "Dept 5",
                            Email = "employee_524@abstractgroup.com",
                            FullName = "Test Employee 524",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_524"
                        },
                        new
                        {
                            UserId = 525,
                            Department = "Dept 1",
                            Email = "employee_525@abstractgroup.com",
                            FullName = "Test Employee 525",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_525"
                        },
                        new
                        {
                            UserId = 526,
                            Department = "Dept 2",
                            Email = "employee_526@abstractgroup.com",
                            FullName = "Test Employee 526",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_526"
                        },
                        new
                        {
                            UserId = 527,
                            Department = "Dept 3",
                            Email = "employee_527@abstractgroup.com",
                            FullName = "Test Employee 527",
                            ManagerId = 402,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_527"
                        },
                        new
                        {
                            UserId = 528,
                            Department = "Dept 4",
                            Email = "employee_528@abstractgroup.com",
                            FullName = "Test Employee 528",
                            ManagerId = 403,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_528"
                        },
                        new
                        {
                            UserId = 529,
                            Department = "Dept 5",
                            Email = "employee_529@abstractgroup.com",
                            FullName = "Test Employee 529",
                            ManagerId = 404,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_529"
                        },
                        new
                        {
                            UserId = 530,
                            Department = "Dept 1",
                            Email = "employee_530@abstractgroup.com",
                            FullName = "Test Employee 530",
                            ManagerId = 401,
                            Password = "HASHED_DEFAULT_PASSWORD",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 21, 10, 52, 30, 228, DateTimeKind.Utc).AddTicks(1446),
                            Username = "emp_test_530"
                        });
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.Ticket", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.User", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITTicketing.Backend.Models.User", "CurrentApprover")
                        .WithMany("ApprovedTickets")
                        .HasForeignKey("CurrentApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITTicketing.Backend.Models.User", "Requester")
                        .WithMany("RequestedTickets")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CurrentApprover");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketApprovalLog", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITTicketing.Backend.Models.Ticket", "Ticket")
                        .WithMany("ApprovalLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketAttachment", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITTicketing.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketAuditLog", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.Ticket", "Ticket")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITTicketing.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.TicketComment", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITTicketing.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.User", b =>
                {
                    b.HasOne("ITTicketing.Backend.Models.User", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITTicketing.Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.Ticket", b =>
                {
                    b.Navigation("ApprovalLogs");

                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ITTicketing.Backend.Models.User", b =>
                {
                    b.Navigation("ApprovedTickets");

                    b.Navigation("AssignedTickets");

                    b.Navigation("DirectReports");

                    b.Navigation("RequestedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
